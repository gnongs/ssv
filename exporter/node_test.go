package exporter

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"github.com/attestantio/go-eth2-client/api/v1"
	spec "github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/bloxapp/ssv/beacon"
	"github.com/bloxapp/ssv/eth1"
	"github.com/bloxapp/ssv/eth1/abiparser"
	"github.com/bloxapp/ssv/exporter/api"
	"github.com/bloxapp/ssv/storage"
	"github.com/bloxapp/ssv/storage/basedb"
	"github.com/bloxapp/ssv/utils/logex"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/herumi/bls-eth-go-binary/bls"
	"github.com/prysmaticlabs/prysm/async/event"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"strings"
	"sync"
	"testing"
)

func init() {
	bls.Init(bls.BLS12_381)
	logex.Build("test", zapcore.DebugLevel, nil)
}

func TestExporter_ShouldProcessValidator(t *testing.T) {
	count1, count2 := uint64(0), uint64(0)
	exp1, err := newMockExporter()
	require.NoError(t, err)
	exp2, err := newMockExporter()
	require.NoError(t, err)
	exp1.numOfInstances = 2
	exp1.ibftSyncEnabled = true
	exp2.numOfInstances = 2
	exp2.ibftSyncEnabled = true
	exp2.instanceID = 1

	pks := []string{
		"b85f43305dcd7f90355b2e1bf6ee621501ecb7afdc268fdc10f64a17b6a5f06daf881068d9725a3f4f6f30f98db50cd3",
		"b88297ef1097d929857d2f4a409e2141fecffcd589aa38428827881b7814ee116f591e0f599fa7e2433a148732ce50e3",
		"b9fab8f48f77561346a9f994aa9bf378ce686260fbb62e93c423ec02756f94979b1c796c9494003e68e407b720793972",
		"b809e86ef4bf4840a59b79592ef7024fc89cc3a1aee87ac32892a5cb9580babb665b74128f5c871e4d2f7a69033106c8",
		"b7734916ae1931bcd607d0e404d8b4de6b46b8298dd12819dfb2e1d59cf89fe0540bf94a786dc6633a83c5cfb7b4b5ca",
		"b62b6cd780e9b3bccddcd8f4de0a5a8d416915a1e21239da92a6d20240545f7a829c3988be6a79394aa05eee24429795",
		"b5b9e340d4c5f06fec38fc3d5bbc1eb39822b4ea2f07f4bd57fecb7d522e3f8755522919c69e019459de525903810363",
		"b88297ef1097d929857d2f4a409e2141fecffcd589aa38428827881b7814ee116f591e0f599fa7e2433a148732ce50e3",
		"aeef1d330f8bb2fe71a430de6c71b80eb5b260a676b2f74e14488c42f50c51d3859a223ca79d847e160afed5a9092caa",
		"aef4bc917b9562a35fbb5fc2d993d9c44a2e928e35500131ca2ef349c5e183b27335d1c356941cd7aa21fe13ce5b31e7",
		"af07571fb559ead83ae1b6000a4a3733e89c47a1568619ad23e887c67acff2822d77988eef904bac3f0a47fe61709b04",
		"ac8c03ce86fa1edb60c4dcebcc888a631fb7117a45482edbfd1141b2494d3563bab15fcefad26d7930e6ab77b7cd4fa9",
		"add13922a1e35c2c606e50cf8038ddc8a227f255f049d912032952b12192864c80eaec0b2bf8ab06aa0f25e329ec0c7d",
	}
	n := len(pks)

	for _, pk := range pks {
		if exp1.shouldProcessValidator(pk) {
			count1++
		}
		if exp2.shouldProcessValidator(pk) {
			count2++
		}
	}

	require.Equal(t, n, int(count1+count2))
	require.Equal(t, 7, int(count1))
	require.Equal(t, 6, int(count2))
}

func TestExporter_handleQueryRequests(t *testing.T) {
	exp, err := newMockExporter()
	require.NoError(t, err)

	netMsg := api.NetworkMessage{
		Msg: api.Message{
			Type:   api.TypeValidator,
			Filter: api.MessageFilter{From: 0},
		},
		Err:  nil,
		Conn: nil,
	}
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeValidator, netMsg.Msg.Type)

	netMsg.Msg.Type = api.TypeOperator
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeOperator, netMsg.Msg.Type)

	netMsg.Msg.Type = "foo"
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeError, netMsg.Msg.Type)
}

func TestExporter_ListenToEth1Events(t *testing.T) {
	exp, err := newMockExporter()
	require.NoError(t, err)

	feed := new(event.Feed)

	go func() {
		errCn := exp.listenToEth1Events(feed)
		for err := range errCn {
			require.NoError(t, err)
		}
	}()

	var wg sync.WaitGroup
	go func() {
		cnOut := make(chan api.Message)
		sub := exp.ws.BroadcastFeed().Subscribe(cnOut)
		defer sub.Unsubscribe()

		for msg := range cnOut {
			raw, err := json.Marshal(msg)
			require.NoError(t, err)
			if msg.Type == api.TypeValidator {
				var validators api.ValidatorsMessage
				err = json.Unmarshal(raw, &validators)
				require.NoError(t, err)
				require.Equal(t, len(validators.Data), 1)
				require.Contains(t, []string{"91db3a13ab428a6c9c20e7104488cb6961abeab60e56cf4ba199" +
					"eed3b5f6e7ced670ecb066c9704dc2fa93133792381c", "8687eb8b88ff9c39e659c47b7bb76665fabfc4fc02c4246caca49700242fa9260a145969ede608b10c711ef2d57d0da1"},
					validators.Data[0].PublicKey)
				wg.Done()
			} else if msg.Type == api.TypeOperator {
				var operators api.OperatorsMessage
				err = json.Unmarshal(raw, &operators)
				require.NoError(t, err)
				require.Equal(t, len(operators.Data), 1)
				require.Contains(t, []string{"asdas", "TestOperator888"}, operators.Data[0].Name)
				wg.Done()
			}
		}
	}()
	t.Run("Legacy abi handling", func(t *testing.T) {
		// pushing 2 events and waits for handling
		wg.Add(1)
		feed.Send(validatorAddedMockEvent(t, eth1.Legacy))

		wg.Add(1)
		feed.Send(operatorAddedMockEvent(t, eth1.Legacy))

		wg.Wait()

		validators, err := exp.storage.ListValidators(0, 0)
		require.NoError(t, err)
		require.Equal(t, len(validators), 1)

		operators, err := exp.storage.ListOperators(0, 0)
		require.NoError(t, err)
		require.Equal(t, len(operators), 1)
	})

	t.Run("V2 abi handling", func(t *testing.T) {
		// pushing 2 events and waits for handling
		wg.Add(1)
		feed.Send(validatorAddedMockEvent(t, eth1.V2))

		wg.Add(1)
		feed.Send(operatorAddedMockEvent(t, eth1.V2))

		wg.Wait()

		validators, err := exp.storage.ListValidators(0, 0)
		require.NoError(t, err)
		require.Equal(t, len(validators), 2)

		operators, err := exp.storage.ListOperators(0, 0)
		require.NoError(t, err)
		require.Equal(t, len(operators), 2)
	})

}

func newMockExporter() (*exporter, error) {
	logger := zap.L()
	db, err := storage.GetStorageFactory(basedb.Options{
		Type:   "badger-memory",
		Logger: logger,
		Path:   "",
	})
	if err != nil {
		return nil, err
	}

	ws := api.NewWsServer(context.Background(), logger, nil, nil, false)

	opts := Options{
		Ctx:            context.Background(),
		Beacon:         beacon.NewMockBeacon(map[uint64][]*beacon.Duty{}, map[spec.BLSPubKey]*v1.Validator{}),
		Logger:         logger,
		ETHNetwork:     nil,
		Eth1Client:     nil,
		Network:        nil,
		DB:             db,
		WS:             ws,
		WsAPIPort:      0,
		NumOfInstances: 1,
		InstanceID:     0,
	}
	e := New(opts)
	ws.UseQueryHandler(e.(*exporter).handleQueryRequests)

	return e.(*exporter), nil
}

func TestToValidatorInformation(t *testing.T) {
	t.Run("legacy abi handling", func(t *testing.T) {
		e := validatorAddedMockEvent(t, eth1.Legacy)
		vae, ok := e.Data.(abiparser.ValidatorAddedEvent)
		require.True(t, ok)

		vi, err := toValidatorInformation(vae)
		require.NoError(t, err)
		require.NotNil(t, vi)
		require.True(t, strings.EqualFold(hex.EncodeToString(vae.PublicKey), vi.PublicKey))
	})

	t.Run("V2 abi handling", func(t *testing.T) {
		e := validatorAddedMockEvent(t, eth1.V2)
		vae, ok := e.Data.(abiparser.ValidatorAddedEvent)
		require.True(t, ok)

		vi, err := toValidatorInformation(vae)
		require.NoError(t, err)
		require.NotNil(t, vi)
		require.True(t, strings.EqualFold(hex.EncodeToString(vae.PublicKey), vi.PublicKey))
	})
}

func validatorAddedMockEvent(t *testing.T, abiVersion eth1.Version) *eth1.Event {
	var rawValidatorAdded string
	switch abiVersion {
	case eth1.V2:
		rawValidatorAdded = `{
   "address":"0xd594c1ef4845713e86658cb42227a811625a285b",
   "topics":[
      "0x088097840a21a2c763dd9bd97cc2b0b27628bb6a42124a398260fac7f31ff571"
   ],
   "data":"0x0000000000000000000000004e409db090a71d14d32adbfbc0a22b1b06dde7de00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000d200000000000000000000000000000000000000000000000000000000000000f4000000000000000000000000000000000000000000000000000000000000000308687eb8b88ff9c39e659c47b7bb76665fabfc4fc02c4246caca49700242fa9260a145969ede608b10c711ef2d57d0da1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424e32705863457872656d643254586476527a684e64455679556a494b524768554d6b313164456c6d59556430566d784d654456574b326734616d7772646e6c7854315976636d784b5245566c517939484d7a567056304d3057455533526e464b55566331516d707651575a315458685165677052517a5a364d45453162314933656e52755748553263305633546b684a534668335245464954486c54645664514d334247596c6f30516e63356231465a54554a6d62564e734c33685852307379566e4e336156686b436b4e4663555a4b526d644e55466b334e6c4a5159306f325232646b545763725756525257565646616d6c52546a4670646d4a4b5a6a5257615570435254637262564e7465465a4e4e54417a566d6c7951575a6e646b494b656e426e64544e7a64485a496448705256315a3265484a304e545230526d39444d48526d5745315252584e53553056745456526f566b686f63566f725a544a434f43396b545751325231466f646e45355a58523152517068516b786f536c704655586c704d6b6c7055553032556c6732613031765a476447556d6376656d747454465a5851305649547a457a61465635526b6f78616e67314c304d3562454979553256454e57396a64316834436d4a525355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642623370566147467a534739486545315953337055627a67725348634b57475630656e4a7457454e594f546474655842706148686a4c32777853456c6c53565677563256334e6b464e4d7a6c5064314a515a3256564d465a33516d51324e485a68627a5a7354544e615157785464565a6c4d677061626c4e305430314a636b4a5457475673596b633062314272524735785a6b4e4e62474a6d6131524e526c685856466f776445314964474a77566b55334e326f3061457078615549335a553133596974774e585578436c6f764e6d5678576a5a6d5257526e4f4449354d7a4e335a55686856574e7a64325a4a516d68594e6c4e61556a4e6c4d6b4a7652554a3262486c6a4e4535454e45466f4e5646615a6a4d7252577078536974356448594b63336869526d354d4e55704c5757686a536c6334596d7443647a4e6f4d3256726555597959324932655545334d336473547a5a68576b6c6152574a34516b453057446c34576a684d534642614e484a59574739476277706f4d564643643149784f555668656d463562306831546d4a6b574770426255396863315669543074744e464a42646b3979613146775a31493453304a344e474d7a637a6b304f466c696454424a526b745162304e49436b4a335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642636a5a586330396b4d7a4a5a5653745065566f7756565a74556c594b516b68455245744c4d3255314f545270557a56326448524c4d564a694d6c5659643359774e475a4b634764344c314e51576d6c71556d45306546646d63335a7361544d7865486731633273724d6c68364f544a3156516f35546c45344f47526c4c305978656d4a74616e51774d323577576a686153323533636d314c4f585a55524539505a4659344d3152694d554e59547a466862334a3265564d314d4552695a546c536248453253474e44436e567554545261516e6b30534864765a3270425a6a5932595446436330383565477832526a63305545677252544a3051316b305a5659774c314d3456466448626a6834523064495457354754306c31556d524d5554414b656d4d7651307050566a42494b316461534556455a5463794e5538775231417754585630516d4e485a57453152334134636b5a7757486b764d444642646d6c58616a426e4d4464714d4652314d30685a4e30646c53776f765a564e544c3168574f474a55524734344d305a516245353457486479566d6c33637a6c306347787a54464d78655578534e30787854324e5959566c344e48524c59334672565451305546686d656d395565433942436d68335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556426456497a5630686d55316c68576c45304e6a6b78656e52306154594b5a6c4242634578716132394c6379737251533930515764535658644862456858596d35694e6a4a5056553472613074545555353356576c4e4d4652775747644f564856534e47706a6457644b61314e54526c5253524170355745777653585270627a6c465a48453361456852513342455130784356464e59526c4e744d6a4a724e6c4e52626c6c476557733355564e6e646e6f795157396d4f584a3659566442516d566d556b5a5064557335436e465754303072627a686e526e467763586c51526e524a527939435653394662316c324d30464e5531413555574a4354585258536b4976635464325153745a4d5546725a454a6959554e756147466b4b3146555747774b5931566b537a526162485a314e566446576b784c6443394f4d6c5531524751776146683452584275526c6f334c3031534e56526e52566c324e466c336155704865574e795254464b5747565355324d724d3231445751704b656b567a596a4a50575442545a453833596a424d635764714d326856613052746345645653324e6f516c5179614777304e574a35616b3476616c5a6a555731726232396c5955677a53437432523249764e7a6856436b56335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000030adb6d42245eaf4b00909679642964d6d5c12c4c550eaffcee499a12ea731c5f101f43a3880b9363daf873ae455fa7aa6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030b6de3081ad9a8becd37676827afb46386eeaa4cd7ebf8711a37505d3c5d3a7a3c1e167e3031e98094ed5262ec65ff205000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030ad4754bd8ca755db23a0701d0dd5488403f9092912b09bcef95b8f70b380b528effd395fb3f06f92c515acf618f2cfa900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003097fceae9c1eeaeb5f9c8ebf875b7bc8248c514fe0c847cb2a15e662595ec6e214ebe3351f9b79629185008be0a1d1f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001584d6a4e563955484666326f37644a76584d4c6867517866486430443945764a4f324e714c6c7753706a4c534b39497076663065514c49645a7a396e2f454941647a544734726c4f344a614332336270634946665036422b742f387a3379552b45425238785a35654235424c316f506730376672544d582f3951325a48305a7a6966716e535a372b672f396243483678675a495a634f5574687a30595141476752542f636c4d466b6162687a6d6a377172794972592f4577424a7a5164335363554d53586b4b4f65466d42496e78494241485238506e69495161597559734e314f4e48353571764b5833433452554a4175502b3675584b3949746d737353716b4249726851786a6f76696f6c4d51776b646b515038396a4c6d635835467062506973355771563856682f516b74376f4c734170306d5851546f67456d47566657426d4d736853464563384170446c6f5968344d547245413d3d000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158575633707254546c593632746152366b42774f32773431544950613474796e574761596663444c672b46644b414c3061686d396136314a784276643676714c78634a7072346d472f61635053446e67657462624761425074494a423871556c4e6144796c744b7051675947526c394e657746736d69546570706c785769644d6a523445643663344154627a495a346c74486a6658683868582b772f7a7850704f4b5648344d7334414a6d50595a6835434c7057426e65554d436f4c412f6849556b71586a586d4a6c2b316d456a7270314a64526c6977762b37586f467379565570744839617767714167416d45415077454c4f575454526b6536482f4e2b774f334d526c6c4663726d476f555a73756d567a38452f523947744b32452f6864573356616934506c686a727552717a3965696d4f66564c764469774b505370546f5479675548717a72745a5047486e2b58716f64496b673d3d000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158466a2b55417371307536524d74632f2b6f61446e5136386568427252745744424e37716b694c6e46526744634a6c454c426d6f6e37482f5056754a4279666775565639624c3968366b4b645844556955575873736a543048306c424e3454785475737a464d5149317158336851576f474735594a644b75596b3268362b3862572f77526c6c667033734544534b2f6e4a4936676c316e427a6a71414361794c505044466d47442b746e46767a6870765152476736334d54475969346c336939744d706f564e574573586249715773716d6f61383747695831354e59435a75397947476c66387567644d5a4b54324a66306345476c6b7957745856676433716b6b6e4d756d504c34746d2b305349636a3177434a456654737478757a614b546d44434e64315a4d72792b6d70457744414f684a6c4e36444b433348486e524d6a57672f4b376f30536d44654b504949644942344e7078673d3d000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158475331774963466545787a5369587a3471384f4e6833734e765577542b493055517a70684773386a6638484b524d36615047617170384c4c65365568737941577659336373485863656144624356536178652f3556785061302f31574f34394a456c4c3346386f4975305649323769572b514d7a7735715944615a4b427476595351663379346f3036686436346c6d5a7a6c3855512b7570616161725746724f464e312b5572716565547130672b713747444b44536a614a7a524a5952566546572b7763456f5063662b515343314a5a6c5a653370314e643472524a7852304a41307477477978634f4f6a4e576b494479565866624a34766b6e72646e7539524b695a5056514d344a6a69796762684b302b516d43744a463436304935304750745247534a58756a4b3163786f6c56366c73536a557a4e51386e7141426838726278693651356b585478774155526d6b44456f2b52773d3d0000000000000000",
   "blockNumber":"0x5b5dc0",
   "transactionHash":"0x39fc924907817a759b41abd98353d3f94b9b1c159a796ad2f5339cbd2ed24dbd",
   "transactionIndex":"0x0",
   "blockHash":"0x021be90e25602cddc56386db2b690d427c05c9de288ca7c39f389157ba08c903",
   "logIndex":"0x2",
   "removed":false
}`
	default:
		rawValidatorAdded = `{
   "address":"0x9573c41f0ed8b72f3bd6a9ba6e3e15426a0aa65b",
   "topics":[
      "0x8674c0b4bd63a0814bf1ae6d64d71cf4886880a8bdbd3d7c1eca89a37d1e9271"
   ],
   "data":"",
   "blockNumber":"0x4a3a2e",
   "transactionHash":"0x20b673d0be280a38daa4f636ec6ad1108c0635dcb35c603f8e401a4120a2b506",
   "transactionIndex":"0x3",
   "blockHash":"0x579a98700bc9f9b1dc6ea3d00f9fd43bf28bd795f615210fd138fe724b8654d4",
   "logIndex":"0x2",
   "removed":false
}`
	}
	var vLogValidatorAdded types.Log
	err := json.Unmarshal([]byte(rawValidatorAdded), &vLogValidatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(eth1.ContractABI(abiVersion)))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)

	abiParser := eth1.NewParser(logex.Build("test", zap.InfoLevel, nil), abiVersion)
	parsed, _, err := abiParser.ParseValidatorAddedEvent(nil, vLogValidatorAdded.Data, contractAbi)
	require.NoError(t, err)

	return &eth1.Event{Log: types.Log{}, Data: *parsed}
}

func operatorAddedMockEvent(t *testing.T, abiVersion eth1.Version) *eth1.Event {
	var rawOperatorAdded string
	switch abiVersion {
	case eth1.V2:
		rawOperatorAdded = `{
   "address":"0xd594c1ef4845713e86658cb42227a811625a285b",
   "topics":[
      "0x39b34f12d0a1eb39d220d2acd5e293c894753a36ac66da43b832c9f1fdb8254e",
      "0x000000000000000000000000a5cfd290965372553efd5fdaeb91c335207b76e2"
   ],
   "data":"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f546573744f70657261746f72383838000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c533038393536343955644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424f4852585247307862544e7459573552613078776556704c4d7a634b4d474e4852476f79646c42545753745257564642643342574f585a705754684b566c677a54324a30566a4e4c4c3234784e79397065475a325645783561475a4b636b677a5953747053314e4963446c3557455534635170364e3252684f546c61567a5534527a4179654446305a6e7075563152454d6d4670626b6c704d444177646a5135526a4654647a6c594f55747451556735567a4e47646a426152457061647a5a4b5646643352305a69436d5a69546d4d326347567654473575636e6c6c576c56586230395a516d733054566732556d395156325a584e554a456155526165484671566a6476624656335a6e46424d57354f65553936525846434d45746b5357384b624578535a4641344f445a424e464a725a47706a55446335615764724d30526a565664434d4468705a6c4d3453466c76533031325a555a72656b30795232646d4f47354c526e466d536e46594e7a6c796246523463417053546e6c6865555a4f5958685a57455934656e42424d486c5952474648513049315469747a5a314e32596a6731574441796457564361314e61644646554d554d7954474d78576c5a6b624552465a5670474e464e6c436b68335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b00000000000000000000000000000000000000000000000000000000",
   "blockNumber":"0x5b5d76",
   "transactionHash":"0xe353261f2d9c94b08769bc1cccf719e687cce72e6ad192ad186033bd96cc94c8",
   "transactionIndex":"0x0",
   "blockHash":"0x1065e001029f348db9945b0e747e62f9dbe4aa6eb154d602026f833078424c70",
   "logIndex":"0x3",
   "removed":false
}`
	default:
		rawOperatorAdded = `{
  "address": "0x9573c41f0ed8b72f3bd6a9ba6e3e15426a0aa65b",
  "topics": [
	"0x39b34f12d0a1eb39d220d2acd5e293c894753a36ac66da43b832c9f1fdb8254e"
  ],
  "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000067ce5c69260bd819b4e0ad13f4b873074d47981100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005617364617300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642623364464e303946596e643554477432636c6f7756465530616d6f4b6232393553555a34546e5a6e636c6b34526d6f7256334e736556705562486c714f4656455a6b5a7957576731565734796454525a545752425a53746a5547597857457372515339514f5668594e3039434e47356d4d51705062306457516a5a33636b4d76616d684d596e5a50534459314d484a3556566c766347565a6147785457486848626b5130646d4e3256485a6a6355784d516974315a54497661586c546546464d634670534c7a5a57436e4e554d325a47636b5676626e704756484675526b4e33513059794f476c51626b7057516d70594e6c517653474e55536a553153555272596e52766447467956545a6a6433644f543068755347743656334a324e326b4b64486c5161314930523255784d576874566b633555577053543351314e6d566f57475a4763305a764e55317855335a7863466c776246687253533936565535744f476f76624846465a465577556c6856636a517854416f7961486c4c57533977566d707a5a32316c56484e4f4e79396163554644613068355a546c47596d74574f565976566d4a556144646f56315a4d5648464855326733516c6b765244646e643039335a6e564c61584579436c52335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330414c53304b00000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x49f59c",
  "transactionHash": "0x097d9a621ace2ca0c78d115d833edc1901bfe75f107a7b3f427663ea308c12ca",
  "transactionIndex": "0xf",
  "blockHash": "0x9542ecebe9d541e2575cb5577dfd4b73c9b0c3ab634fcac4ce0ff319249c90e4",
  "logIndex": "0xf",
  "removed": false
}`
	}

	var vLogOperatorAdded types.Log
	err := json.Unmarshal([]byte(rawOperatorAdded), &vLogOperatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(eth1.ContractABI(abiVersion)))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)

	abiParser := eth1.NewParser(logex.GetLogger(), abiVersion)
	parsed, _, err := abiParser.ParseOperatorAddedEvent(nil, vLogOperatorAdded.Data, vLogOperatorAdded.Topics, contractAbi)
	require.NoError(t, err)

	return &eth1.Event{Log: types.Log{}, Data: *parsed}
}
